                                        程序编译与代码优化

1. 早期(编译期)优化
1-1 概述
    1) 前端编译器：Sun的Javac、 Eclipse JDT中的增量式编译器（ECJ）[1]。
       JIT编译器：HotSpot VM的C1、 C2编译器。
       AOT编译器：GNU Compiler for the Java（GCJ）[2]、 Excelsior JET[3]。
    2) javac这类编译器几乎不对代码进行性能优化，把性能优化放到了JIT即时编译器内,
       可为JRuby、Groovy这类语言的代码也同等享有优化带来的好处
1-2 javac
    1) 编译过程
       - 1. 解析与填充符号表过程
         *  词法、语法分析
            - 词法分析是将源代码的字符流转变为标记（Token）集合，单个字符是程序编写过程的最小元素，
              而标记则是编译过程的最小元素，关键字、 变量名、 字面量、 运算符都可以成为标记
            - 语法分析是根据Token序列构造抽象语法树的过程，抽象语法树（Abstract Syntax Tree,AST）
              是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构(Construct),
              例如包、 类型、 修饰符、 运算符、 接口、 返回值甚至代码注释等都可以是一个语法结构。
         *  填充符号表
            - 符号表（Symbol Table）是由一组符号地址和符号信息构成的表格
            - 在语义分析中，符号表所登记的内容将用于语义检查（如检查一个名字的使用和原先的说明是否一致）和产生中间代码。
              在目标代码生成阶段，当对符号名进行地址分配时，符号表是地址分配的依据。
       - 2. 插入式注解处理器的注解处理过程

       - 3. 分析与字节码生成过程
         *  标注检查
            - 检查的内容包括诸如变量使用前是否已被声明、 变量与赋值之间的数据类型是否能够匹配等
            - 常量折叠 如定义了 int a = 1 + 2 会被编译为 int a = 3
         *  数据及控制流分析
            - 数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、
              方法的每条路径是否都有返回值、 是否所有的受查异常都被正确处理了等问题。
         *  语法糖
            - 语法糖:也称糖衣语法，是由英国计算机科学家彼得·约翰·兰达(Peter J.Landin)发明的一个术语，
              指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。
              通常来说，使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。
            - java语法糖:泛型、变长参数、 自动装箱/拆箱等
            - 泛型：编译器会进行解泛，所以泛型进行方法重载
            - 自动装箱、 拆箱与遍历循环
         *  字节码生成
            - 字节码生成阶段不仅仅是把前面各个步骤所生成的信息（语法树、 符号表）转化成字节码写到磁盘中，
              编译器还进行了少量的代码添加和转换工作。